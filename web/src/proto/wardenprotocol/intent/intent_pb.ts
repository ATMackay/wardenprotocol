// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file wardenprotocol/intent/intent.proto (package wardenprotocol.intent, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message wardenprotocol.intent.Intent
 */
export class Intent extends Message<Intent> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * The actual intent informations. It must be one the supported intent types:
   * - BoolparserIntent
   *
   * @generated from field: google.protobuf.Any intent = 3;
   */
  intent?: Any;

  constructor(data?: PartialMessage<Intent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.Intent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "intent", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Intent {
    return new Intent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Intent {
    return new Intent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Intent {
    return new Intent().fromJsonString(jsonString, options);
  }

  static equals(a: Intent | PlainMessage<Intent> | undefined, b: Intent | PlainMessage<Intent> | undefined): boolean {
    return proto3.util.equals(Intent, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.BoolparserIntent
 */
export class BoolparserIntent extends Message<BoolparserIntent> {
  /**
   * Definition of the intent, eg.
   * "t1 + t2 + t3 > 1"
   *
   * @generated from field: string definition = 1;
   */
  definition = "";

  /**
   * @generated from field: repeated wardenprotocol.intent.IntentParticipant participants = 2;
   */
  participants: IntentParticipant[] = [];

  constructor(data?: PartialMessage<BoolparserIntent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.BoolparserIntent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "definition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "participants", kind: "message", T: IntentParticipant, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BoolparserIntent {
    return new BoolparserIntent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BoolparserIntent {
    return new BoolparserIntent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BoolparserIntent {
    return new BoolparserIntent().fromJsonString(jsonString, options);
  }

  static equals(a: BoolparserIntent | PlainMessage<BoolparserIntent> | undefined, b: BoolparserIntent | PlainMessage<BoolparserIntent> | undefined): boolean {
    return proto3.util.equals(BoolparserIntent, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.IntentParticipant
 */
export class IntentParticipant extends Message<IntentParticipant> {
  /**
   * @generated from field: string abbreviation = 1;
   */
  abbreviation = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<IntentParticipant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.IntentParticipant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "abbreviation", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentParticipant {
    return new IntentParticipant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentParticipant {
    return new IntentParticipant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentParticipant {
    return new IntentParticipant().fromJsonString(jsonString, options);
  }

  static equals(a: IntentParticipant | PlainMessage<IntentParticipant> | undefined, b: IntentParticipant | PlainMessage<IntentParticipant> | undefined): boolean {
    return proto3.util.equals(IntentParticipant, a, b);
  }
}

