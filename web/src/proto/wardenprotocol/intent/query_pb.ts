// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file wardenprotocol/intent/query.proto (package wardenprotocol.intent, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Action, ActionStatus } from "./action_pb.js";
import { Intent } from "./intent_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message wardenprotocol.intent.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message wardenprotocol.intent.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: wardenprotocol.intent.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.QueryActionsRequest
 */
export class QueryActionsRequest extends Message<QueryActionsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryActionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryActionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActionsRequest {
    return new QueryActionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActionsRequest {
    return new QueryActionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActionsRequest {
    return new QueryActionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActionsRequest | PlainMessage<QueryActionsRequest> | undefined, b: QueryActionsRequest | PlainMessage<QueryActionsRequest> | undefined): boolean {
    return proto3.util.equals(QueryActionsRequest, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.QueryActionsResponse
 */
export class QueryActionsResponse extends Message<QueryActionsResponse> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated wardenprotocol.intent.Action actions = 2;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<QueryActionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryActionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "actions", kind: "message", T: Action, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActionsResponse {
    return new QueryActionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActionsResponse {
    return new QueryActionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActionsResponse {
    return new QueryActionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActionsResponse | PlainMessage<QueryActionsResponse> | undefined, b: QueryActionsResponse | PlainMessage<QueryActionsResponse> | undefined): boolean {
    return proto3.util.equals(QueryActionsResponse, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.IntentResponse
 */
export class IntentResponse extends Message<IntentResponse> {
  /**
   * @generated from field: wardenprotocol.intent.Intent intent = 1;
   */
  intent?: Intent;

  /**
   * @generated from field: google.protobuf.Any metadata = 2;
   */
  metadata?: Any;

  constructor(data?: PartialMessage<IntentResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.IntentResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intent", kind: "message", T: Intent },
    { no: 2, name: "metadata", kind: "message", T: Any },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IntentResponse {
    return new IntentResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IntentResponse {
    return new IntentResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IntentResponse {
    return new IntentResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IntentResponse | PlainMessage<IntentResponse> | undefined, b: IntentResponse | PlainMessage<IntentResponse> | undefined): boolean {
    return proto3.util.equals(IntentResponse, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.QueryIntentsRequest
 */
export class QueryIntentsRequest extends Message<QueryIntentsRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryIntentsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryIntentsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIntentsRequest {
    return new QueryIntentsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIntentsRequest {
    return new QueryIntentsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIntentsRequest {
    return new QueryIntentsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIntentsRequest | PlainMessage<QueryIntentsRequest> | undefined, b: QueryIntentsRequest | PlainMessage<QueryIntentsRequest> | undefined): boolean {
    return proto3.util.equals(QueryIntentsRequest, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.QueryIntentsResponse
 */
export class QueryIntentsResponse extends Message<QueryIntentsResponse> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated wardenprotocol.intent.IntentResponse intents = 2;
   */
  intents: IntentResponse[] = [];

  constructor(data?: PartialMessage<QueryIntentsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryIntentsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "intents", kind: "message", T: IntentResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIntentsResponse {
    return new QueryIntentsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIntentsResponse {
    return new QueryIntentsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIntentsResponse {
    return new QueryIntentsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIntentsResponse | PlainMessage<QueryIntentsResponse> | undefined, b: QueryIntentsResponse | PlainMessage<QueryIntentsResponse> | undefined): boolean {
    return proto3.util.equals(QueryIntentsResponse, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.QueryIntentByIdRequest
 */
export class QueryIntentByIdRequest extends Message<QueryIntentByIdRequest> {
  /**
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero;

  constructor(data?: PartialMessage<QueryIntentByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryIntentByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIntentByIdRequest {
    return new QueryIntentByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIntentByIdRequest {
    return new QueryIntentByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIntentByIdRequest {
    return new QueryIntentByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIntentByIdRequest | PlainMessage<QueryIntentByIdRequest> | undefined, b: QueryIntentByIdRequest | PlainMessage<QueryIntentByIdRequest> | undefined): boolean {
    return proto3.util.equals(QueryIntentByIdRequest, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.QueryIntentByIdResponse
 */
export class QueryIntentByIdResponse extends Message<QueryIntentByIdResponse> {
  /**
   * @generated from field: wardenprotocol.intent.IntentResponse intent = 1;
   */
  intent?: IntentResponse;

  constructor(data?: PartialMessage<QueryIntentByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryIntentByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "intent", kind: "message", T: IntentResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIntentByIdResponse {
    return new QueryIntentByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIntentByIdResponse {
    return new QueryIntentByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIntentByIdResponse {
    return new QueryIntentByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIntentByIdResponse | PlainMessage<QueryIntentByIdResponse> | undefined, b: QueryIntentByIdResponse | PlainMessage<QueryIntentByIdResponse> | undefined): boolean {
    return proto3.util.equals(QueryIntentByIdResponse, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.QueryActionsByAddressRequest
 */
export class QueryActionsByAddressRequest extends Message<QueryActionsByAddressRequest> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: wardenprotocol.intent.ActionStatus status = 3;
   */
  status = ActionStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<QueryActionsByAddressRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryActionsByAddressRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(ActionStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActionsByAddressRequest {
    return new QueryActionsByAddressRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActionsByAddressRequest {
    return new QueryActionsByAddressRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActionsByAddressRequest {
    return new QueryActionsByAddressRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActionsByAddressRequest | PlainMessage<QueryActionsByAddressRequest> | undefined, b: QueryActionsByAddressRequest | PlainMessage<QueryActionsByAddressRequest> | undefined): boolean {
    return proto3.util.equals(QueryActionsByAddressRequest, a, b);
  }
}

/**
 * @generated from message wardenprotocol.intent.QueryActionsByAddressResponse
 */
export class QueryActionsByAddressResponse extends Message<QueryActionsByAddressResponse> {
  /**
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 1;
   */
  pagination?: PageResponse;

  /**
   * @generated from field: repeated wardenprotocol.intent.Action actions = 2;
   */
  actions: Action[] = [];

  constructor(data?: PartialMessage<QueryActionsByAddressResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.intent.QueryActionsByAddressResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageResponse },
    { no: 2, name: "actions", kind: "message", T: Action, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryActionsByAddressResponse {
    return new QueryActionsByAddressResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryActionsByAddressResponse {
    return new QueryActionsByAddressResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryActionsByAddressResponse {
    return new QueryActionsByAddressResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryActionsByAddressResponse | PlainMessage<QueryActionsByAddressResponse> | undefined, b: QueryActionsByAddressResponse | PlainMessage<QueryActionsByAddressResponse> | undefined): boolean {
    return proto3.util.equals(QueryActionsByAddressResponse, a, b);
  }
}

