// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file wardenprotocol/identity/keychain.proto (package wardenprotocol.identity, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message wardenprotocol.identity.Keychain
 */
export class Keychain extends Message<Keychain> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: string creator = 2;
   */
  creator = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: repeated string admins = 4;
   */
  admins: string[] = [];

  /**
   * @generated from field: repeated string parties = 5;
   */
  parties: string[] = [];

  /**
   * @generated from field: uint64 admin_intent_id = 6;
   */
  adminIntentId = protoInt64.zero;

  /**
   * @generated from field: wardenprotocol.identity.KeychainFees fees = 7;
   */
  fees?: KeychainFees;

  /**
   * @generated from field: bool is_active = 8;
   */
  isActive = false;

  constructor(data?: PartialMessage<Keychain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.identity.Keychain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "admins", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "parties", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "admin_intent_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 7, name: "fees", kind: "message", T: KeychainFees },
    { no: 8, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Keychain {
    return new Keychain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Keychain {
    return new Keychain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Keychain {
    return new Keychain().fromJsonString(jsonString, options);
  }

  static equals(a: Keychain | PlainMessage<Keychain> | undefined, b: Keychain | PlainMessage<Keychain> | undefined): boolean {
    return proto3.util.equals(Keychain, a, b);
  }
}

/**
 * @generated from message wardenprotocol.identity.KeychainFees
 */
export class KeychainFees extends Message<KeychainFees> {
  /**
   * @generated from field: uint64 key_req = 1;
   */
  keyReq = protoInt64.zero;

  /**
   * @generated from field: uint64 sig_req = 2;
   */
  sigReq = protoInt64.zero;

  constructor(data?: PartialMessage<KeychainFees>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wardenprotocol.identity.KeychainFees";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_req", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "sig_req", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): KeychainFees {
    return new KeychainFees().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): KeychainFees {
    return new KeychainFees().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): KeychainFees {
    return new KeychainFees().fromJsonString(jsonString, options);
  }

  static equals(a: KeychainFees | PlainMessage<KeychainFees> | undefined, b: KeychainFees | PlainMessage<KeychainFees> | undefined): boolean {
    return proto3.util.equals(KeychainFees, a, b);
  }
}

